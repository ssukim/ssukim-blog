{"version":3,"sources":["components/common/Responsive.tsx","lib/styles/palette.ts","components/common/Button.tsx","components/common/Header.tsx","lib/api/client.ts","lib/api/auth.ts","modules/loading/loading.ts","modules/user/reducer.ts","containers/common/HeaderContainer.tsx","components/posts/Pagination.tsx","containers/posts/PaginationContainer.tsx","components/common/SubInfo.tsx","components/common/Tags.tsx","components/posts/PostList.tsx","lib/api/posts.ts","modules/posts/reducer.ts","containers/posts/PostListContainer.tsx","pages/PostListPage.tsx","components/auth/AuthTemplate.tsx","modules/auth/reducer.ts","components/auth/AuthForm.tsx","containers/auth/LoginForm.tsx","pages/LoginPage.tsx","containers/auth/RegisterForm.tsx","pages/RegisterPage.tsx","components/write/Editor.tsx","modules/write/reducer.ts","containers/write/EditorContainer.tsx","components/write/TagBox.tsx","containers/write/TagBoxContainer.tsx","components/write/WriteActionButtons.tsx","containers/write/WriteActionButtonsContainer.tsx","pages/WritePage.tsx","components/common/AskModal.tsx","components/post/AskRemoveModal.tsx","components/post/PostActionButtons.tsx","components/post/PostViewer.tsx","modules/post/reducer.ts","containers/post/PostViewerContainer.tsx","pages/PostPage.tsx","App.tsx","reportWebVitals.ts","modules/index.ts","index.tsx"],"names":["ResponsiceBlock","styled","div","Responsive","children","rest","palette","gray","cyan","buttonStyle","css","props","fullWidth","disabled","StyledButton","button","StyledLink","Link","Button","to","HeaderBlock","Wrapper","Spacer","UserInfoH","Header","user","onLogout","className","username","onClick","client","axios","create","login","a","password","post","response","data","register","check","context","get","logout","startLoading","createAction","finishLoading","loading","createReducer","state","action","payload","checkSaga","logoutSaga","userSaga","CHECK","checkAsync","createAsyncAction","tempSetUser","put","call","authAPI","success","failure","checkFailureSaga","console","log","localStorage","removeItem","e","takeLatest","reducer","tempUser","checkError","error","HeaderContainer","useSelector","dispatch","useDispatch","PaginationBlock","PageNumber","buildLink","tag","page","query","qs","stringify","Pagination","lastPage","undefined","withRouter","location","posts","parse","search","ignoreQueryPrefix","parseInt","SubInfoBlock","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","tags","map","key","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","showWriteButton","style","textAlign","writePost","readPost","id","listPosts","queryString","updatePost","patch","listPostsSaga","postsSaga","g_lastPage","LIST_POSTS","listPostsAsync","headers","listPostsError","useEffect","request","PostListPage","AuthTemplateBlock","WhiteBox","AuthTemplate","registerSaga","loginSaga","authSaga","REGISTER","LOGIN","registerAsync","loginAsync","changeField","form","value","initializeForm","auth","passwordConfirm","authError","produce","draft","AuthFormBlock","StyledInput","input","Footer","ErrorMessage","textMap","AuthForm","type","onChange","onSubmit","text","autoComplete","name","placeholder","marginTop","history","useState","setError","push","setItem","JSON","target","preventDefault","LoginPage","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writePostSaga","updatePostSaga","writeSaga","WRITE_POST","initialize","setOriginalPost","writeAsync","updateAsync","initialState","postError","originalPostId","write","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","onRemove","TagList","TagBox","onChangeTags","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","isEdit","goBack","WritePage","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","modal","setModal","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","message","dangerouslySetInnerHTML","__html","readPostSaga","postSaga","READ_POST","readPostAsync","unloadPost","takeEvery","readError","match","postId","params","delete","ownPost","PostPage","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","rootReducer","combineReducers","all","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7390ab8c.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ResponsiceBlock = styled.div`\r\n  padding-left: 1rem;\r\n  padding-right: 1rem;\r\n  width: 1024px;\r\n  margin: 0 auth; /* 중앙 정렬 */\r\n\r\n  /* 브라우저 크기에 따라 가로 크기 변경 */\r\n  @media (max-width: 1024px) {\r\n    width: 768px;\r\n  }\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst Responsive = ({ children, ...rest }: any) => {\r\n  // style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\r\n  // ...rest를 사용하여 ResponsiveBlock에게 전달\r\n  return <ResponsiceBlock {...rest}>{children}</ResponsiceBlock>;\r\n};\r\n\r\nexport default Responsive;\r\n","// source: https://yeun.github.io/open-color/\r\nconst palette = {\r\n    gray: [\r\n      '#f8f9fa',\r\n      '#f1f3f5',\r\n      '#e9ecef',\r\n      '#dee2e6',\r\n      '#ced4da',\r\n      '#adb5bd',\r\n      '#868e96',\r\n      '#495057',\r\n      '#343a40',\r\n      '#212529',\r\n    ],\r\n    cyan: [\r\n      '#e3fafc',\r\n      '#c5f6fa',\r\n      '#99e9f2',\r\n      '#66d9e8',\r\n      '#3bc9db',\r\n      '#22b8cf',\r\n      '#15aabf',\r\n      '#1098ad',\r\n      '#0c8599',\r\n      '#0b7285',\r\n    ],\r\n  };\r\n  \r\n  export default palette;","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\ntype ButtonProps = {\r\n  fullWidth: boolean,\r\n  cyan: boolean,\r\n  disabled: boolean\r\n}\r\nconst buttonStyle = css<ButtonProps>`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n\r\n  background: ${palette.gray[8]};\r\n  &:hover {\r\n    background: ${palette.gray[6]};\r\n  }\r\n\r\n  ${(props) =>\r\n    props.fullWidth &&\r\n    css`\r\n      padding-top: 0.75rem;\r\n      padding-bottom: 0.75rem;\r\n      width: 100%;\r\n      font-size: 1.125rem;\r\n    `}\r\n\r\n  ${(props) =>\r\n    props.cyan &&\r\n    css`\r\n      background: ${palette.cyan[5]};\r\n      &:hover {\r\n        background: ${palette.cyan[4]};\r\n      }\r\n    `}\r\n\r\n  ${(props) =>\r\n    props.disabled &&\r\n    css`\r\n      background: ${palette.gray[3]};\r\n      color: ${palette.gray[5]};\r\n      cursor: not-allowed;\r\n    `}\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst Button = (props:any) => {\r\n  // console.log('props: '+ JSON.stringify(props));\r\n  return props.to ? (\r\n    <StyledLink {...props} />\r\n  ) : (\r\n    <StyledButton {...props} />\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Responsive from './Responsive';\r\nimport Button from './Button';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserInfo } from '../../lib/api/auth';\r\n\r\nconst HeaderBlock = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  background: white;\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\r\n`;\r\n\r\n/**\r\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\r\n */\r\nconst Wrapper = styled(Responsive)`\r\n  height: 4rem;\r\n  display: flex;\r\n  align-item: center;\r\n  justify-content: space-between; /* 자식 엘리먼트 사이의 여백을 최대로 설정 */\r\n  .logo {\r\n    font-size: 1.125rem;\r\n    font-weight: 800;\r\n    letter-spacing: 2px;\r\n  }\r\n  .right {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\n/**\r\n * 헤더가 fixed로 되어 있기 때문에 페이지의 콘텐츠가 4rem 아래에 나타나도록 해주는 컴포넌트\r\n */\r\nconst Spacer = styled.div`\r\n  height: 4rem;\r\n`;\r\n\r\nconst UserInfoH = styled.div`\r\n  font-weight: 800;\r\n  margin-right: 1rem;\r\n`;\r\n\r\ninterface HeaderProps {\r\n  user: UserInfo | null,\r\n  onLogout: Function\r\n}\r\n\r\nconst Header = ({ user, onLogout }:HeaderProps) => {\r\n  // console.log(user)\r\n\r\n  return (\r\n    <>\r\n      <HeaderBlock>\r\n        <Wrapper>\r\n          <Link to=\"/\" className=\"logo\">\r\n            SSUKIMLOG\r\n          </Link>\r\n          {user ? (\r\n            <div className=\"right\">\r\n              <UserInfoH>{user.username}</UserInfoH>\r\n              <Button onClick={onLogout}>로그아웃</Button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"right\">\r\n              <Button to=\"/login\">로그인</Button>\r\n            </div>\r\n          )}\r\n        </Wrapper>\r\n      </HeaderBlock>\r\n      <Spacer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import axios from 'axios';\r\n\r\nconst client = axios.create();\r\n\r\n/**\r\n * 글로벌 설정 예시:\r\n * \r\n * // API 주소를 다른 곳으로 사용함\r\n * client.defaults.baseURL = 'https://external-api-sever.com/\r\n * \r\n * // 헤더 설정\r\n * client.defaults.headers.common['Authorization] = 'Bearer alb2c3df';\r\n * \r\n * // 인터셉터 설정\r\n * axios.intercepter.response.use({\r\n *  response => {\r\n *      //요청 성공 시 특정 작업 수행\r\n *      return response\r\n *  },\r\n *  error => {\r\n *      // 요청 실패 시 특정 작업 수행\r\n *      return Promise.reject(error);\r\n *  }\r\n * })\r\n */\r\n\r\n export default client;","import client from './client';\r\n\r\n// 로그인\r\nexport async function login({ username, password }: UserInfo) {\r\n  const response = await client.post('/api/auth/login', { username, password });\r\n  return response.data;\r\n}\r\n\r\n// 회원가입\r\nexport async function register({ username, password }: UserInfo) {\r\n  const response = await client.post('/api/auth/register', {\r\n    username,\r\n    password,\r\n  });\r\n  return response.data;\r\n}\r\n\r\n// 로그인 상태 확인\r\nexport async function check(context: unknown) {\r\n  const response = await client.get('/api/auth/check');\r\n  // console.log(response)\r\n  return response.data;\r\n}\r\n\r\n// 로그아웃\r\nexport const logout = () => client.post('/api/auth/logout');\r\n\r\nexport interface UserInfo {\r\n  _id?: string;\r\n  username: string;\r\n  password: string;\r\n  passwordConfirm?: string;\r\n}\r\n","// import { createAction, handleActions } from 'redux-actions';\r\nimport { createAction, ActionType, createReducer } from 'typesafe-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\n/*\r\n 요청을 위한 액션 타입을 payload로 설정합니다 (예: \"sample/GET_POST\")\r\n*/\r\nexport const startLoading = createAction(START_LOADING)<string>();\r\nexport const finishLoading = createAction(FINISH_LOADING)<string>();\r\n\r\nconst actions = { startLoading, finishLoading };\r\ntype LoadingAction = ActionType<typeof actions>;\r\n\r\ntype LoadingState = {};\r\n\r\nconst initialState: LoadingState = {};\r\n\r\nconst loading = createReducer<LoadingState, LoadingAction>(initialState, {\r\n  [START_LOADING]: (state, action) => ({\r\n    ...state,\r\n    [action.payload]: true,\r\n  }),\r\n  [FINISH_LOADING]: (state, action) => ({\r\n    ...state,\r\n    [action.payload]: false,\r\n  }),\r\n});\r\n\r\nexport default loading;\r\n","import {\n  ActionType,\n  createAction,\n  createAsyncAction,\n  createReducer,\n} from 'typesafe-actions';\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { AxiosError } from 'axios';\nimport * as authAPI from '../../lib/api/auth';\nimport { UserInfo } from '../../lib/api/auth';\nimport { finishLoading, startLoading } from '../loading/loading';\n\nconst CHECK = 'user/CHECK';\nconst CHECK_SUCCESS = 'user/CHECK_SUCCESS';\nconst CHECK_FAILURE = 'user/CHECK_FAILURE';\nconst LOGOUT = 'user/LOGOUT';\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\n\nexport const checkAsync = createAsyncAction(\n  CHECK,\n  CHECK_SUCCESS,\n  CHECK_FAILURE,\n)<string, UserInfo, AxiosError>();\n\nexport const logout = createAction(LOGOUT)();\nexport const tempSetUser = createAction(TEMP_SET_USER)<string | null>();\n\nconst actions = { checkAsync, logout, tempSetUser };\ntype UserAction = ActionType<typeof actions>;\n\n//saga 생성\nfunction* checkSaga(\n  action: ReturnType<typeof checkAsync.request>,\n) {\n  // console.log('checkAsync')\n  yield put(startLoading(CHECK)); // 로딩 시작\n  try {\n    const response: UserInfo = yield call(authAPI.check, action.payload);\n    // console.log(response)\n    yield put(checkAsync.success(response));\n  } catch (e) {\n    yield put(checkAsync.failure(e));\n  }\n  yield put(finishLoading(CHECK)); // 로딩 시작\n}\n\nfunction checkFailureSaga() {\n  console.log('checkFailureSaga');\n  try {\n    localStorage.removeItem('user'); // localStorage에서 user를 제거\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nfunction* logoutSaga() {\n  try {\n    yield call(authAPI.logout); // logout API 호출\n    localStorage.removeItem('user'); // localStorage에서 user를 제거\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\n  yield takeLatest(LOGOUT, logoutSaga);\n}\n\n//리듀서 초기화\ntype UserState = {\n  user: UserInfo | null;\n  tempUser: string | null;\n  checkError: Error | null;\n};\n\nconst initialState: UserState = {\n  user: null,\n  tempUser: null,\n  checkError: null,\n};\n\n//리듀서 정의\nconst reducer = createReducer<UserState, UserAction>(initialState, {\n  [TEMP_SET_USER]: (state, { payload: tempUser }) => ({\n    ...state,\n    tempUser,\n  }),\n  [CHECK_SUCCESS]: (state, { payload: user }) => ({\n    ...state,\n    user,\n    checkError: null,\n  }),\n  [CHECK_FAILURE]: (state, { payload: error }) => ({\n    ...state,\n    user: null,\n    checkError: error,\n  }),\n  [LOGOUT]: (state) => ({\n    ...state,\n    user: null,\n  }),\n});\n\nexport default reducer;\n","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { RootState } from '../../modules';\r\nimport Header from '../../components/common/Header';\r\nimport { logout } from '../../modules/user';\r\n\r\nconst HeaderContainer = () => {\r\n    const{ user } = useSelector((state: RootState) => ({\r\n        user: state.user.user\r\n    }));\r\n    // console.log(user);\r\n    \r\n    const dispatch = useDispatch();\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n    };\r\n    return <Header user={user} onLogout={onLogout} />;\r\n};\r\n\r\nexport default HeaderContainer;","import React from 'react';\nimport styled from 'styled-components';\nimport qs from 'qs';\nimport Button from '../common/Button';\n\nconst PaginationBlock = styled.div`\n  width: 320px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 3rem;\n`;\nconst PageNumber = styled.div``;\n\nconst buildLink = ({ username, tag, page }: any) => {\n  const query = qs.stringify({ tag, page });\n  return username ? `/@${username}?${query}` : `/?${query}`;\n};\n\nconst Pagination = ({ page, lastPage, username, tag }: any) => {\n  // console.log('page: ' + page);\n  // console.log('lastPage: ' + lastPage);\n  return (\n    <PaginationBlock>\n      <Button\n        disabled={page === 1}\n        to={\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\n        }\n      >\n        이전\n      </Button>\n      <PageNumber>{page}</PageNumber>\n      <Button\n        disabled={page === lastPage}\n        to={\n          page === lastPage\n            ? undefined\n            : buildLink({ username, tag, page: page + 1 })\n        }\n      >\n        다음\n      </Button>\n    </PaginationBlock>\n  );\n};\n\nexport default Pagination;\n","import React, { FunctionComponent } from 'react';\nimport qs from 'qs';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../modules';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport Pagination from '../../components/posts/Pagination';\n\nconst PaginationContainer: FunctionComponent<RouteComponentProps> = ({\n  location,\n}: any) => {\n  const { lastPage, posts, loading } = useSelector((state: RootState) => ({\n    lastPage: state.posts.lastPage,\n    posts: state.posts.posts,\n    loading: state.posts.loading,\n  }));\n\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여 주지 않음\n  if (!posts || loading) return null;\n\n  //   console.log('location.search:' + location.search);\n  // page가 없으면 1을 기본값으로 사용\n  const { tag, username, page = 1 }:any = qs.parse(location.search, {\n    ignoreQueryPrefix: true,\n  });\n\n  return (\n    <Pagination\n      tag={tag}\n      username={username}\n      page={parseInt(page, 10)}\n      lastPage={lastPage}\n    />\n  );\n};\n\nexport default withRouter(PaginationContainer);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled, { css } from 'styled-components';\nimport palette from '../../lib/styles/palette';\n\ntype SubInfoBlockProps = {\n  hasMarginTop?: boolean;\n};\n\ntype SubInfoProps = {\n  username: string;\n  publishedDate: Date;\n  hasMarginTop?: boolean;\n};\n\nconst SubInfoBlock = styled.div<SubInfoBlockProps>`\n  ${(props) =>\n    props.hasMarginTop &&\n    css`\n      margin-top: 1rem;\n    `}\n  color: ${palette.gray[6]}\n\n  /* span 사이에 가운뎃점 문자 보여주기*/\n  span + span:before {\n    color: ${palette.gray[4]};\n    padding-left: 0.25rem;\n    padding-right: 0.25rem;\n    content: '\\\\B7'; /* 가운뎃점 문자 */\n  }\n`;\n\nconst SubInfo = ({ username, publishedDate, hasMarginTop }: SubInfoProps) => {\n  return (\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\n      <span>\n        <b>\n          <Link to={`/@${username}`}>{username+' '}</Link>\n        </b>\n      </span>\n      <span>{new Date(publishedDate).toLocaleDateString()}</span>\n    </SubInfoBlock>\n  );\n};\n\nexport default SubInfo;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\n\nconst TagsBlock = styled.div`\n  margin-top: 0.5rem;\n  .tag {\n    display: inline-block;\n    color: ${palette.cyan[7]};\n    text-decoration: none;\n    margin-right: 0.5rem;\n    &:hover {\n      color: ${palette.cyan[6]};\n    }\n  }\n`;\n\nconst Tags = ({ tags }: { tags: string[] }) => {\n  return (\n    <TagsBlock>\n      {tags.map((tag) => (\n        <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\n          #{tag}\n        </Link>\n      ))}\n    </TagsBlock>\n  );\n};\n\nexport default Tags;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { UserInfo } from '../../lib/api/auth';\nimport { ReadPostInfo } from '../../lib/api/posts';\nimport palette from '../../lib/styles/palette';\nimport Button from '../common/Button';\nimport Responsive from '../common/Responsive';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\n\nconst PostListBlock = styled(Responsive)`\n  margin-top: 3rem;\n`;\n\nconst WritePostButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 3rem;\n`;\n\nconst PostItemBlock = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n  /* 맨 위 포스트는 padding-top 없음 */\n  $:first-child {\n    padding-top: 0;\n  }\n  & + & {\n    border-top: 1px solid ${palette.gray[2]};\n  }\n  h2 {\n    font-size: 2rem;\n    margin-bottom: 0;\n    margin-top: 0;\n    &:hover {\n      color: ${palette.gray[6]};\n    }\n  }\n  p {\n    margin-top: 2rem;\n  }\n`;\n\ntype PostListProps = {\n  posts: Array<ReadPostInfo>;\n  loading: boolean;\n  error: Error | null;\n  showWriteButton: UserInfo | null;\n};\n\ntype PostItemProps = {\n  post: ReadPostInfo\n};\n\nconst PostItem = ({ post }: PostItemProps) => {\n  // console.log(post)\n  const { title, body, tags, publishedDate, user, _id } = post;\n  return (\n    <PostItemBlock>\n      <h2>\n        <Link to={`/@${user.username}/${_id}`}>{title}</Link>\n      </h2>\n      <SubInfo\n        username={user.username}\n        publishedDate={new Date(publishedDate)}\n      />\n      <Tags tags={tags} />\n      <p>{body}</p>\n    </PostItemBlock>\n  );\n};\n\nconst PostList = ({\n  posts,\n  loading,\n  error,\n  showWriteButton,\n}: PostListProps) => {\n  if (error) {\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\n  }\n  \n  return (\n    <PostListBlock>\n      <WritePostButtonWrapper>\n        {showWriteButton && (\n          <Button cyan=\"true\" to=\"/write\">\n            새 글 작성하기\n          </Button>\n        )}\n      </WritePostButtonWrapper>\n      {loading && <p style={{textAlign: 'center'}}>로딩중...</p>}\n      {/* 로딩 중이 아니고, 포스트 배열이 존재할 때만 노출 */}\n      {!loading && posts && (\n        <div>\n          {posts.map((post) => (\n            <PostItem post={post} key={post._id}/>\n          ))}\n        </div>\n      )}\n    </PostListBlock>\n  );\n};\n\nexport default PostList;\n","import client from './client';\nimport qs from 'qs';\nimport { UserInfo } from './auth';\n\nexport interface WritePostInfo {\n  id?: string;\n  title: string;\n  body: string;\n  tags: string[];\n}\n\nexport interface ReadPostInfo {\n  title: string;\n  body: string;\n  tags: string[];\n  publishedDate: Date;\n  user: UserInfo;\n  _id?: string;\n}\n\nexport interface ListPostInfo {\n  page: string;\n  tag: string;\n  username: string;\n}\n\nexport async function writePost({ title, body, tags }: WritePostInfo) {\n  const response = await client.post('/api/posts', { title, body, tags });\n  return response.data;\n}\n\nexport async function readPost(id: string) {\n  const response = await client.get(`/api/posts/${id}`);\n  return response.data;\n}\n\nexport async function listPosts({ page, username, tag }: ListPostInfo) {\n  const queryString = qs.stringify({\n    page,\n    username,\n    tag,\n  });\n  const response = await client.get(`/api/posts?${queryString}`);\n  return response;\n}\n\nexport async function updatePost({ id, title, body, tags }: WritePostInfo) {\n  const response = await client.patch(`/api/posts/${id}`, {\n    title,\n    body,\n    tags,\n  });\n  return response.data;\n}\n\nexport const removePost = (id: string) => client.delete(`/api/posts/${id}`);\n","import { call, put, takeLatest } from '@redux-saga/core/effects';\nimport { AxiosError } from 'axios';\nimport { ActionType, createAsyncAction, createReducer } from 'typesafe-actions';\nimport { ListPostInfo, listPosts, ReadPostInfo } from '../../lib/api/posts';\nimport { finishLoading, startLoading } from '../loading/loading';\n\nlet g_lastPage: number = 0;\n\nconst LIST_POSTS = 'posts/LIST_POSTS';\nconst LIST_POSTS_SUCCESS = 'posts/LIST_POSTS_SUCCESS';\nconst LIST_POSTS_FAILURE = 'posts/LIST_POSTS_FAILURE';\n\nexport const listPostsAsync = createAsyncAction(\n  LIST_POSTS,\n  LIST_POSTS_SUCCESS,\n  LIST_POSTS_FAILURE,\n)<ListPostInfo, ReadPostInfo[], AxiosError>();\n\nconst actions = { listPostsAsync };\ntype ListAction = ActionType<typeof actions>;\n\nfunction* listPostsSaga(action: ReturnType<typeof listPostsAsync.request>) {\n  yield put(startLoading(LIST_POSTS));\n  try {\n    const response: {\n      data: ReadPostInfo[];\n      headers: { ['last-page']: string };\n    } = yield call(listPosts, action.payload);\n    \n    // console.log(response.headers['last-page']);\n    // console.log(response.headers);\n    g_lastPage=parseInt(response.headers['last-page'], 10);\n    yield put(listPostsAsync.success(response.data));\n  } catch (e) {\n    yield put(listPostsAsync.failure(e));\n  }\n  yield put(finishLoading(LIST_POSTS));\n}\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n}\n\ntype ListState = {\n  posts: ReadPostInfo[];\n  listPostsError: Error | null;\n  loading: boolean;\n  lastPage: number | null;\n};\n\nconst initialState: ListState = {\n  posts: [],\n  listPostsError: null,\n  loading: false,\n  lastPage: null,\n};\n\nconst posts = createReducer<ListState, ListAction>(initialState, {\n  [LIST_POSTS]: (state) => ({\n    ...state,\n    loading: true,\n  }),\n  [LIST_POSTS_SUCCESS]: (state, { payload: posts }) => ({\n    ...state,\n    posts,\n    loading: false,\n    lastPage: g_lastPage,\n  }),\n  [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\n    ...state,\n    error,\n    loading: false,\n  }),\n});\n\nexport default posts;\n","import React, { FunctionComponent, useEffect } from 'react';\nimport qs from 'qs';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../modules';\nimport PostList from '../../components/posts/PostList';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { listPostsAsync } from '../../modules/posts';\n\nconst PostListContainer: FunctionComponent<RouteComponentProps> = ({\n  location\n}: any) => {\n  const dispatch = useDispatch();\n  const { posts, error, loading, user } = useSelector((state: RootState) => ({\n    posts: state.posts.posts,\n    error: state.posts.listPostsError,\n    loading: state.posts.loading,\n    user: state.user.user,\n  }));\n  // console.log(location)\n  useEffect(() => {\n    const { tag, username, page }: any = qs.parse(location.search, {\n      ignoreQueryPrefix: true,\n    });\n    dispatch(listPostsAsync.request({tag, username, page}));\n  }, [dispatch, location.search]);\n\n  return (\n    <PostList\n      loading={loading}\n      error={error}\n      posts={posts}\n      showWriteButton={user}\n    />\n  );\n};\n\nexport default withRouter(PostListContainer);\n","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer'\r\nimport PaginationContainer from '../containers/posts/PaginationContainer';\r\nimport PostListContainer from '../containers/posts/PostListContainer';\r\n\r\nconst PostListPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostListContainer />\r\n      <PaginationContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostListPage;\r\n","import React, {ReactNode} from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport {Link} from 'react-router-dom';\r\n\r\n/**\r\n * 회원가입/로그인 페이지의 레이아웃을 담당하는 컴포넌트입니다.\r\n */\r\n\r\n /* 화면 전체를 채움 */\r\nconst AuthTemplateBlock = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background: ${palette.gray[2]};\r\n  /* flex로 내주 내용 중앙 정렬 */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n/* 흰색 박스 */\r\nconst WhiteBox = styled.div`\r\n  .logo-area{\r\n    display: block;\r\n    padding-bottom: 2rem;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    letter-spacing: 2px;\r\n  }\r\n  box-shadow: 0 0 8px rgba(0,0,0,0.025);\r\n  padding: 2rem;\r\n  width: 360px;\r\n  background: white;\r\n  border-radius: 2px;\r\n`;\r\n\r\nconst AuthTemplate = ({children}: { children: ReactNode }) => {\r\n  // console.log(children)\r\n  return (\r\n    <AuthTemplateBlock>\r\n      <WhiteBox>\r\n        <div className=\"logo-area\">\r\n          <Link to=\"/\">SSUKIMLOG</Link>\r\n        </div>\r\n        {children}\r\n      </WhiteBox>\r\n    </AuthTemplateBlock>\r\n  );\r\n};\r\n\r\nexport default AuthTemplate;\r\n","import {\n  createAction,\n  createReducer,\n  ActionType,\n  createAsyncAction,\n} from 'typesafe-actions';\nimport produce from 'immer';\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport * as authAPI from '../../lib/api/auth';\nimport { UserInfo } from '../../lib/api/auth';\nimport { AxiosError } from 'axios';\nimport { finishLoading, startLoading } from '../loading/loading';\n\n//액션타입\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\n\nconst REGISTER = 'auth/REGISTER';\nconst REGISTER_SUCCESS = 'auth/REGISTER_SUCCESS';\nconst REGISTER_FAILURE = 'auth/REGISTER_FAILURE';\n\nconst LOGIN = 'auth/LOGIN';\nconst LOGIN_SUCCESS = 'auth/LOGIN_SUCCESS';\nconst LOGIN_FAILURE = 'auth/LOGIN_FAILURE';\n\n//액션생성함수\nexport const registerAsync = createAsyncAction(\n  REGISTER,\n  REGISTER_SUCCESS,\n  REGISTER_FAILURE,\n)<UserInfo, UserInfo, AxiosError>();\n\nexport const loginAsync = createAsyncAction(\n  LOGIN,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE,\n)<UserInfo, UserInfo, AxiosError>();\nexport const changeField = createAction(\n  CHANGE_FIELD,\n  ({ form, key, value }) => ({\n    form, // register , login\n    key, // username, password, passwordConfirm\n    value, // 실제 바꾸려는 값\n  }),\n)();\nexport const initializeForm = createAction(INITIALIZE_FORM)(); // register / login\n\nconst actions = { registerAsync, loginAsync, changeField, initializeForm };\ntype AuthAction = ActionType<typeof actions>;\n\n// saga 생성\nfunction* registerSaga(action: ReturnType<typeof registerAsync.request>) {\n  yield put (startLoading(REGISTER));\n  try {\n    const response: UserInfo = yield call(authAPI.register, action.payload);\n    yield put(registerAsync.success(response));\n  } catch (e) {\n    yield put(registerAsync.failure(e));\n  }\n  yield put (finishLoading(REGISTER));\n}\n\nfunction* loginSaga(action: ReturnType<typeof loginAsync.request>) {\n  yield put (startLoading(LOGIN));\n  try {\n    const response: UserInfo = yield call(authAPI.login, action.payload);\n    yield put(loginAsync.success(response));\n  } catch (e) {\n    yield put(loginAsync.failure(e));\n  }\n  yield put (finishLoading(LOGIN));\n}\n\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n}\n\n//초기화\ntype AuthState = {\n  register: UserInfo;\n  login: UserInfo;\n  auth: UserInfo | null;\n  authError: Error | null;\n  form: string;\n};\n\nconst initialState: AuthState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: '',\n  },\n  login: {\n    username: '',\n    password: '',\n  },\n  auth: null,\n  authError: null,\n  form: '',\n};\n\n//리듀서 생성\nconst auth = createReducer<AuthState, AuthAction>(initialState, {\n  [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\n    produce(state, (draft: any) => {\n      draft[form][key] = value; // 예: state.register.username을 바꾼다\n    }),\n  [INITIALIZE_FORM]: (state) => ({\n    ...state,\n    register: {\n      username: '',\n      password: '',\n      passwordConfirm: '',\n    },\n    login: {\n      username: '',\n      password: '',\n    },\n    authError: null, // 폼 전환 시 회원 인증 에러 초기화\n  }),\n  // 회원가입 성공\n  [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\n    ...state,\n    authError: null,\n    auth,\n  }),\n  // 회원가입 실패\n  [REGISTER_FAILURE]: (state, { payload: error }) => ({\n    ...state,\n    authError: error,\n  }),\n  // 로그인 성공\n  [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\n    ...state,\n    authError: null,\n    auth,\n  }),\n  // 로그인 실패\n  [LOGIN_FAILURE]: (state, { payload: error }) => ({\n    ...state,\n    authError: error,\n  }),\n});\n\nexport default auth;\n","import React, { FormEventHandler, ChangeEventHandler } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\nimport Button from '../common/Button';\r\n\r\n/**\r\n * 회원가입 또는 로그인 폼을 보여 줍니다.\r\n */\r\nconst AuthFormBlock = styled.div`\r\n  h3 {\r\n    margin: 0;\r\n    color: ${palette.gray[8]};\r\n    margin-bottom: 1rem;\r\n  }\r\n`;\r\n\r\n/**\r\n * 스타일링 된 input\r\n */\r\nconst StyledInput = styled.input`\r\n  font-size: 1rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[5]};\r\n  padding-bottom: 0.5rem;\r\n  outline: none;\r\n  width: 100%;\r\n  &:focus {\r\n    color: $oc-teal-7;\r\n    border-bottom: 1px solid ${palette.gray[8]};\r\n  }\r\n  & + & {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\n/**\r\n * 폼 하단에 로그인 혹은 회원가입 링크를 보여 줌\r\n */\r\nconst Footer = styled.div`\r\n  margin-top: 2rem;\r\n  text-align: right;\r\n  a {\r\n    color: ${palette.gray[6]};\r\n    text-decoration: underline;\r\n    &:hover {\r\n      color: ${palette.gray[9]};\r\n    }\r\n  }\r\n`;\r\n\r\n/**\r\n * 에러를 보여 줍니다.\r\n */\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n  text-align: center;\r\n  font-size: 0.875rem;\r\n  margin-top: 1rem;\r\n`;\r\n\r\ntype AuthFormProps = {\r\n  username: string;\r\n  password: string;\r\n  passwordConfirm?: string;\r\n};\r\n\r\nconst textMap: { login: string; register: string } = {\r\n  login: '로그인',\r\n  register: '회원가입',\r\n};\r\n\r\nconst AuthForm = ({\r\n  type,\r\n  form,\r\n  onChange,\r\n  onSubmit,\r\n  error,\r\n}: {\r\n  type: string;\r\n  form: AuthFormProps;\r\n  onChange: ChangeEventHandler<HTMLInputElement>;\r\n  onSubmit: FormEventHandler<HTMLFormElement>;\r\n  error: string;\r\n}) => {\r\n  const text = type === 'login' ? textMap['login'] : textMap['register'];\r\n\r\n  return (\r\n    <AuthFormBlock>\r\n      <h3>{text}</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <StyledInput\r\n          autoComplete=\"username\"\r\n          name=\"username\"\r\n          placeholder=\"아이디\"\r\n          onChange={onChange}\r\n          value={form.username}\r\n        />\r\n        <StyledInput\r\n          autoComplete=\"new-password\"\r\n          name=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          type=\"password\"\r\n          onChange={onChange}\r\n          value={form.password}\r\n        />\r\n        {type === 'register' && (\r\n          <StyledInput\r\n            autoComplete=\"new-password\"\r\n            name=\"passwordConfirm\"\r\n            placeholder=\"비밀번호 확인\"\r\n            type=\"password\"\r\n            onChange={onChange}\r\n            value={form.passwordConfirm}\r\n          />\r\n        )}\r\n        {error && <ErrorMessage>{error}</ErrorMessage>}\r\n        <Button cyan fullWidth style={{ marginTop: '1rem' }}>\r\n          {text}\r\n        </Button>\r\n      </form>\r\n      <Footer>\r\n        {type === 'login' ? (\r\n          <Link to=\"/register\">회원가입</Link>\r\n        ) : (\r\n          <Link to=\"/login\">로그인</Link>\r\n        )}\r\n      </Footer>\r\n    </AuthFormBlock>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React, {\r\n  FormEvent,\r\n  ChangeEvent,\r\n  FunctionComponent,\r\n  useEffect,\r\n  useState,\r\n} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../modules';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { changeField, initializeForm, loginAsync } from '../../modules/auth';\r\n// import { getAuthAsync } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { checkAsync } from '../../modules/user';\r\n\r\nconst LoginForm: FunctionComponent<RouteComponentProps> = ({ history }) => {\r\n  const [error, setError] = useState<string>('');\r\n\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector((state: RootState) => ({\r\n    form: state.auth.login,\r\n    auth: state.auth.auth,\r\n    authError: state.auth.authError,\r\n    user: state.user.user,\r\n  }));\r\n\r\n  //인풋 변경 이벤트 핸들러\r\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'login',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n\r\n  //폼 등록 이벤트 핸들러\r\n  const onSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const { username, password } = form;\r\n    dispatch(loginAsync.request({ username, password }));\r\n  };\r\n\r\n  //컴포넌트가 처음 렌더링될 때 form을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (authError) {\r\n      console.log('오류 발생');\r\n      console.log(authError);\r\n      setError('로그인 실패');\r\n      return;\r\n    }\r\n    // console.log('auth:'+auth);\r\n    if (auth) {\r\n      console.log('로그인 성공');\r\n      dispatch(checkAsync.request(''));\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push('/');\r\n      try {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } catch (e) {\r\n        console.log('localStorage is not working');\r\n      }\r\n    }\r\n  }, [history, user]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"login\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport LoginForm from '../containers/auth/LoginForm';\r\n\r\nconst LoginPage = () => {\r\n    return (\r\n        <AuthTemplate>\r\n            <LoginForm />\r\n        </AuthTemplate>\r\n    );\r\n};\r\n\r\nexport default LoginPage;","import React, {\r\n    FormEvent,\r\n    ChangeEvent,\r\n    FunctionComponent,\r\n    useEffect,\r\n    useState,\r\n  } from 'react';\r\n  import { useDispatch, useSelector } from 'react-redux';\r\n  import { RootState } from '../../modules';\r\n  import { changeField, initializeForm, registerAsync } from '../../modules/auth';\r\n  import AuthForm from '../../components/auth/AuthForm';\r\n  import { checkAsync } from '../../modules/user';\r\n  import { withRouter, RouteComponentProps } from 'react-router-dom';\r\n  \r\n  const RegisterForm: FunctionComponent<RouteComponentProps> = ({ history }) => {\r\n    const [error, setError] = useState<string>('');\r\n    const dispatch = useDispatch();\r\n    const { form, auth, authError, user } = useSelector((state: RootState) => ({\r\n      form: state.auth.register,\r\n      auth: state.auth.auth,\r\n      authError: state.auth.authError,\r\n      user: state.user.user,\r\n    }));\r\n  \r\n    //인풋 변경 이벤트 핸들러\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const { value, name } = e.target;\r\n      dispatch(\r\n        changeField({\r\n          form: 'register',\r\n          key: name,\r\n          value,\r\n        }),\r\n      );\r\n    };\r\n  \r\n    //폼 등록 이벤트 핸들러\r\n    const onSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n      const { username, password, passwordConfirm } = form;\r\n      // 하나라도 비어 있다면\r\n      if ([username, password, passwordConfirm].includes('')) {\r\n        setError('빈 칸을 모두 입력하세요.');\r\n        return;\r\n      }\r\n      // 비밀번호가 일치하지 않는다면)\r\n      if (password !== passwordConfirm) {\r\n        setError('비밀번호가 일치하지 않습니다.');\r\n        dispatch(changeField({ form: 'register', key: 'password', value: '' }));\r\n        dispatch(\r\n          changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\r\n        );\r\n        return;\r\n      }\r\n      dispatch(registerAsync.request({ username, password }));\r\n    };\r\n  \r\n    //컴포넌트가 처음 렌더링될 때 form을 초기화함\r\n    useEffect(() => {\r\n      dispatch(initializeForm());\r\n    }, [dispatch]);\r\n  \r\n    // 회원가입 성공/실패 처리\r\n    useEffect(() => {\r\n      if (authError) {\r\n        // 계정명이 이미 존재할 때\r\n        // if (authError.response.status === 409) {\r\n        //   setError('이미 존재하는 계정명입니다.');\r\n        //   return;\r\n        // }\r\n        // 기타 이유\r\n        setError('회원가입 실패');\r\n        return;\r\n      }\r\n      if (auth) {\r\n        console.log('회원가입 성공');\r\n        // console.log(auth);\r\n        dispatch(checkAsync.request(''));\r\n      }\r\n    }, [auth, authError, dispatch]);\r\n  \r\n    // user 값이 잘 성정되었는지 확인\r\n    useEffect(() => {\r\n      if (user) {\r\n        console.log('check API 성공');\r\n        console.log(user);\r\n        history.push('/'); // 홈 화면으로 이동\r\n        try {\r\n          localStorage.setItem('user', JSON.stringify(user));\r\n        } catch (e) {\r\n          console.log('localStorage is not working');\r\n        }\r\n      }\r\n    }, [history, user]);\r\n  \r\n    return (\r\n      <AuthForm\r\n        type=\"register\"\r\n        form={form}\r\n        onChange={onChange}\r\n        onSubmit={onSubmit}\r\n        error={error}\r\n      />\r\n    );\r\n  };\r\n  \r\n  export default withRouter(RegisterForm);\r\n  ","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport Register from '../containers/auth/RegisterForm'\r\n\r\nconst RegisterPage = () => {\r\n    return (\r\n        <AuthTemplate>\r\n            <Register/>\r\n        </AuthTemplate>\r\n    );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import React, { useEffect, useRef } from 'react';\nimport Quill, { QuillOptionsStatic } from 'quill';\nimport 'quill/dist/quill.bubble.css';\nimport styled from 'styled-components';\nimport Responsive from '../common/Responsive';\nimport palette from '../../lib/styles/palette';\n\nconst EditorBlock = styled(Responsive)`\n  /*페이지 위아래 여백 지정*/\n  padding-top: 5rem;\n  padding-bottom: 5rem;\n`;\n\nconst TitleInput = styled.input`\n    font-size: 3rem;\n    outline: none;\n    padding-bottom: 0.5rem;\n    border: none;\n    border-bottom: 1px solid ${palette.gray[4]}\n    margin-bottom: 2rem;\n    width: 100%\n`;\nconst QuillWrapper = styled.div`\n  /*최소 크기 지정 및 padding 제거*/\n  .ql-editor {\n    padding: 0;\n    min-height: 320px;\n    font-size: 1.125rem;\n    line-height: 1.5;\n  }\n  .ql-editor.ql-blank::before {\n    left: 0px;\n  }\n`;\n\ntype quillElement = {\n  current: string | Element;\n  options?: QuillOptionsStatic | undefined;\n  // ref?: React.LegacyRef<HTMLDivElement> | undefined\n};\ntype quillInstance = {\n  current: string | Quill;\n};\n\nconst Editor = ({ title, body, onChangeField }: any) => {\n  const quillElement: any = useRef(null);\n  const quillInstance: any = useRef(null);\n\n  useEffect(() => {\n    quillInstance.current = new Quill(quillElement.current, {\n      theme: 'bubble',\n      placeholder: '내용을 작성하세요...',\n      modules: {\n        toolbar: [\n          [{ header: '1' }, { header: '2' }],\n          ['bold', 'italic', 'underline', 'strike'],\n          [{ list: 'ordered' }, { list: 'bullet' }],\n          ['blockquote', 'code-block', 'link', 'image'],\n        ],\n      },\n    });\n\n    //quill에 text-change 이벤트 핸들러 등록\n    //참고: https://quilljs.com/docs/api#events\n    const quill = quillInstance.current;\n    quill.on(\n      'text-change',\n      (delta: string, oldDelta: string, source: string) => {\n        if (source === 'user') {\n          onChangeField({ key: 'body', value: quill.root.innerHTML });\n        }\n      },\n    );\n  }, [onChangeField]);\n\n  const mounted = useRef(false);\n  useEffect(() => {\n    if (mounted.current) return;\n    mounted.current = true;\n    quillInstance.current.root.innerHTML = body;\n  }, [body]);\n  \n  const onChangeTitle = (e: any) => {\n    onChangeField({ key: 'title', value: e.target.value });\n  };\n\n  return (\n    <EditorBlock>\n      <TitleInput\n        placeholder=\"제목을 입력하세요\"\n        onChange={onChangeTitle}\n        value={title}\n      />\n      <QuillWrapper>\n        <div ref={quillElement} />\n      </QuillWrapper>\n    </EditorBlock>\n  );\n};\n\nexport default Editor;\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport { AxiosError } from 'axios';\nimport {\n  ActionType,\n  createAction,\n  createAsyncAction,\n  createReducer,\n} from 'typesafe-actions';\nimport { WritePostInfo, writePost, updatePost } from '../../lib/api/posts';\nimport { finishLoading, startLoading } from '../loading/loading';\n\nconst INITIALIZE = 'write/INITIALIZE';\nconst CHANGE_FIELD = 'write/CHANGE_FIELD';\nconst WRITE_POST = 'write/WRITE_POST';\nconst WRITE_POST_SUCCESS = 'write/WRITE_POST_SUCCESS';\nconst WRITE_POST_FAILURE = 'write/WRITE_POST_FAILURE';\nconst UPDATE_POST = 'write/UPDATE_POST';\nconst UPDATE_POST_SUCCESS = 'write/UPDATE_POST_SUCCESS';\nconst UPDATE_POST_FAILURE = 'write/UPDATE_POST_FAILURE';\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\n\nexport const initialize = createAction(INITIALIZE)();\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}))();\nexport const setOriginalPost = createAction(\n  SET_ORIGINAL_POST,\n  (post) => post,\n)();\nexport const writeAsync = createAsyncAction(\n  WRITE_POST,\n  WRITE_POST_SUCCESS,\n  WRITE_POST_FAILURE,\n)<WritePostInfo, WritePostInfo, AxiosError>();\nexport const updateAsync = createAsyncAction(\n  UPDATE_POST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n)<WritePostInfo, WritePostInfo, AxiosError>();\n\nconst actions = { initialize, changeField, setOriginalPost, writeAsync, updateAsync };\ntype WriteAction = ActionType<typeof actions>;\n\n//saga 생성\nfunction* writePostSaga(action: ReturnType<typeof writeAsync.request>) {\n  yield put(startLoading(WRITE_POST)); // 로딩 시작\n  try {\n    const response: WritePostInfo = yield call(writePost, action.payload);\n    yield put(writeAsync.success(response));\n  } catch (e) {\n    yield put(writeAsync.failure(e));\n  }\n  yield put(finishLoading(WRITE_POST)); // 로딩 끝\n}\n\nfunction* updatePostSaga(action: ReturnType<typeof updateAsync.request>) {\n  yield put(startLoading(UPDATE_POST)); // 로딩 시작\n  try {\n    const response: WritePostInfo = yield call(updatePost, action.payload);\n    yield put(updateAsync.success(response));\n  } catch (e) {\n    yield put(updateAsync.failure(e));\n  }\n  yield put(finishLoading(UPDATE_POST)); // 로딩 끝\n}\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\n\ntype WriteState = {\n  title: string;\n  body: string;\n  tags: string[];\n  post: WritePostInfo | null;\n  postError: Error | null;\n  originalPostId: string | null;\n};\n\nconst initialState: WriteState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null,\n};\n\nconst write = createReducer<WriteState, WriteAction>(initialState, {\n  [INITIALIZE]: (state) => initialState,\n  [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n    ...state,\n    [key]: value,\n  }),\n  [WRITE_POST]: (state) => ({\n    ...state,\n    // post, postError 초기화\n    post: null,\n    postError: null,\n  }),\n  [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\n    ...state,\n    post,\n  }),\n  [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\n    ...state,\n    postError,\n  }),\n  [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\n    ...state,\n    title: post.title,\n    body: post.body,\n    tags: post.tags,\n    originalPostId: post._id,\n  }),\n  [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\n    ...state,\n    post,\n  }),\n  [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\n    ...state,\n    postError,\n  }),\n});\n\nexport default write;\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Editor from '../../components/write/Editor';\nimport { RootState } from '../../modules';\nimport { changeField, initialize } from '../../modules/write';\n\nconst EditorContainer = () => {\n  const dispatch = useDispatch();\n  const { title, body } = useSelector((state: RootState) => ({\n    title: state.write.title,\n    body: state.write.body,\n  }));\n\n  const onChangeField = useCallback(\n    (payload) => dispatch(changeField(payload)),\n    [dispatch],\n  );\n\n  // 언마운트될 때 초기화\n  useEffect(() => {\n    return () => {\n      dispatch(initialize());\n    };\n  }, [dispatch]);\n  return <Editor onChangeField={onChangeField} title={title} body={body}/>\n};\n\nexport default EditorContainer;","import React, {\n  useCallback,\n  useState,\n  ChangeEvent,\n  FormEvent,\n  useEffect,\n} from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\n\nconst TagBoxBlock = styled.div`\n  width: 100%;\n  border-top: 1px solid ${palette.gray[2]};\n  padding-top: 2rem;\n\n  h4 {\n    color: ${palette.gray[8]};\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst TagForm = styled.form`\n  border-radius: 4px;\n  overflow: hidden;\n  display: flex;\n  width: 256px;\n  border: 1px solid ${palette.gray[9]};\n  input,\n  button {\n    outline: none;\n    border: none;\n    font-size: 1rem;\n  }\n  input {\n      padding: 0.5rem;\n      flex: 1;\n      min-width: 0;\n  }\n  button: {\n      cursor: pointer;\n      padding-right:1rem;\n      padding-left:1rem;\n      border:none:\n      background: ${palette.gray[8]};\n      color:white;\n      font-weight:bold;\n      $:hover {\n          background: ${palette.gray[6]};\n      }\n  }\n`;\n\nconst Tag = styled.div`\n  margin-right: 0.5rem;\n  color: ${palette.gray[6]};\n  cursor: pointer;\n  &:hover {\n    opacity: 0.5;\n  }\n`;\n\nconst TagListBlock = styled.div`\n  display: flex;\n  margin-top: 0.5rem;\n`;\n\n// tag 값이 바뀔 때만 리렌더링\nconst TagItem = React.memo(\n  ({ tag, onRemove }: { tag: string; onRemove: Function }) => (\n    <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\n  ),\n);\n\n// tags 값이 바뀔 때만 리렌더링\nconst TagList = React.memo(\n  ({ tags, onRemove }: { tags: string[]; onRemove: Function }) => (\n    <TagListBlock>\n      {tags.map((tag) => (\n        <TagItem key={tag} tag={tag} onRemove={onRemove} />\n      ))}\n    </TagListBlock>\n  ),\n);\n\nconst TagBox = ({\n  tags,\n  onChangeTags,\n}: {\n  tags: string[];\n  onChangeTags: Function;\n}) => {\n  const [input, setInput] = useState<string>('');\n  const [localTags, setLocalTags] = useState<string[]>([]);\n\n  const insertTag = useCallback(\n    (tag: string) => {\n      if (!tag) return; // 공백이라면 추가하지 않음\n      if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\n      const nextTags: string[] = [...localTags, tag];\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onRemove = useCallback(\n    (tag: string) => {\n      const nextTags = localTags.filter((t) => t !== tag);\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setInput(e.target.value);\n  }, []);\n\n  const onSubmit = useCallback(\n    (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      insertTag(input.trim()); // 앞뒤 공백을 없앤 후 등록\n      setInput(''); // input 초기화\n    },\n    [input, insertTag],\n  );\n\n  // tags 값이 바뀔 때\n  useEffect(() => {\n    setLocalTags(tags);\n  }, [tags]);\n\n  return (\n    <TagBoxBlock>\n      <h4>태그</h4>\n      <TagForm onSubmit={onSubmit}>\n        <input\n          placeholder=\"태그를 입력하세요\"\n          value={input}\n          onChange={onChange}\n        />\n        <button type=\"submit\">추가</button>\n      </TagForm>\n      <TagList tags={localTags} onRemove={onRemove} />\n    </TagBoxBlock>\n  );\n};\n\nexport default TagBox;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TagBox from '../../components/write/TagBox';\nimport { RootState } from '../../modules';\nimport { changeField } from '../../modules/write';\n\nconst TagBoxContainer = () => {\n  const dispatch = useDispatch();\n  const {tags} = useSelector((state: RootState) => ({\n    tags: state.write.tags,\n  }));\n\n  const onChangeTags = (nextTags: string) => {\n    dispatch(\n      changeField({\n        key: 'tags',\n        value: nextTags,\n      }),\n    );\n  };\n\n  return <TagBox tags={tags} onChangeTags={onChangeTags} />\n};\n\nexport default TagBoxContainer;","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../common/Button';\n\nconst WriteActionButtonsBlock = styled.div`\n  margin-top: 1rem;\n  margin-bottom: 3rem;\n  button + button {\n    margin: 0.5rem;\n  }\n`;\n\n// TagBox에서 사용하는 버튼과 일치하는 높이로 설정한 후 서로 간의 여백 지정\nconst StyledButton = styled(Button)`\n  height: 2.125rem;\n  & + & {\n    margin-left: 0.5rem;\n  }\n`;\n\ntype WriteActionButtonsProps = {\n  onCancel: Function;\n  onPublish: Function;\n  isEdit: boolean;\n};\nconst WriteActionButtons = ({\n  onCancel,\n  onPublish,\n  isEdit,\n}: WriteActionButtonsProps) => {\n  return (\n    <WriteActionButtonsBlock>\n      <StyledButton cyan onClick={onPublish}>\n        포스트 {isEdit ? '수정' : '등록'}\n      </StyledButton>\n      <StyledButton onClick={onCancel}>취소</StyledButton>\n    </WriteActionButtonsBlock>\n  );\n};\n\nexport default WriteActionButtons;\n","import React, { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { RootState } from '../../modules';\nimport { updateAsync, writeAsync } from '../../modules/write';\n\nconst WriteActionButtonsContainer: FunctionComponent<RouteComponentProps> = ({\n  history,\n}) => {\n  const dispatch = useDispatch();\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\n    (state: RootState) => ({\n      title: state.write.title,\n      body: state.write.body,\n      tags: state.write.tags,\n      post: state.write.post,\n      postError: state.write.postError,\n      originalPostId: state.write.originalPostId,\n    }),\n  );\n\n  // 포스트 등록\n  const onPublish = () => {\n    if (originalPostId) {\n      dispatch(\n        updateAsync.request({\n          title,\n          body,\n          tags,\n          id:originalPostId\n        }),\n      );\n      return;\n    }\n    dispatch(\n      writeAsync.request({\n        title,\n        body,\n        tags,\n      }),\n    );\n  };\n\n  // 취소\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  // 성공 혹은 실패 시 할 작업\n  useEffect(() => {\n    if (post) {\n      const { _id, user }: any = post;\n      history.push(`/@${user.username}/${_id}`);\n    }\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n\n  return <WriteActionButtons onPublish={onPublish} onCancel={onCancel} isEdit={!!originalPostId}/>;\n};\n\nexport default withRouter(WriteActionButtonsContainer);\n","import React from 'react';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport Responsive from '../components/common/Responsive';\r\nimport EditorContainer from '../containers/write/EditorContainer';\r\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\r\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContainer';\r\n\r\n\r\nconst WritePage = () => {\r\n  return (\r\n    <Responsive>\r\n      <Helmet>\r\n        <title>글 작성하기 - SSUKIMLOG</title>\r\n      </Helmet>\r\n      <EditorContainer />\r\n      <TagBoxContainer />\r\n      <WriteActionButtonsContainer />\r\n    </Responsive>\r\n  );\r\n};\r\n\r\nexport default WritePage;\r\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './Button';\n\nconst Fullscreen = styled.div`\n  position: fixed;\n  z-index: 30;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.25);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst AskModalBlock = styled.div`\n  width: 320px;\n  background: white;\n  padding: 1.5rem;\n  border-radius: 4px;\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\n  h2 {\n    margin-top: 0;\n    margin-bottom: 1rem;\n  }\n  p {\n    margin-bottom: 3rem;\n  }\n  .buttons {\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\nconst StyledButton = styled(Button)`\n  height: 2rem;\n  & + & {\n    margin-left: 0.75rem;\n  }\n`;\n\nconst AskModal = ({\n  visible,\n  title,\n  description,\n  confirmText = '확인',\n  cancelText = '취소',\n  onConfirm,\n  onCancel,\n}: any) => {\n  if (!visible) return null;\n  return (\n    <Fullscreen>\n      <AskModalBlock>\n        <h2>{title}</h2>\n        <p>{description}</p>\n        <div className=\"buttons\">\n          <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\n          <StyledButton onClick={onConfirm}>{confirmText}</StyledButton>\n        </div>\n      </AskModalBlock>\n    </Fullscreen>\n  );\n};\n\nexport default AskModal;","import React from 'react';\nimport AskModal from '../common/AskModal';\n\nconst AskRemoveModal = ({ visible, onConfirm, onCancel }: any) => {\n  return (\n    <AskModal\n      visible={visible}\n      title=\"포스트 삭제\"\n      description=\"포스트를 정말 삭제하시겠습니까?\"\n      confirmText=\"삭제\"\n      onConfirm={onConfirm}\n      onCancel={onCancel}\n    />\n  );\n};\n\nexport default AskRemoveModal;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport AskRemoveModal from './AskRemoveModal';\n\ntype PostActionButtonsProps = {\n  onEdit: Function;\n  onRemove: Function;\n};\n\nconst PostActionButtonsBlock = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 2rem;\n  margin-top: -1.5rem;\n`;\n\nconst ActionButton = styled.button<any>`\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  color: ${palette.gray[6]};\n  font-weight: bold;\n  border: none;\n  outline: none;\n  font-size: 0.875rem;\n  cursor: pointer;\n  &:hover {\n    background: ${palette.gray[1]};\n    color: ${palette.cyan[7]};\n  }\n  & + & {\n    margin-left: 0.25rem;\n  }\n`;\n\nconst PostActionButtons = ({ onEdit, onRemove }: PostActionButtonsProps) => {\n  const [modal, setModal] = useState(false);\n  const onRemoveClick = () => {\n    setModal(true);\n  };\n  const onCancel = () => {\n    setModal(false);\n  };\n  const onConfirm = () => {\n    setModal(false);\n    onRemove();\n  };\n\n  return (\n    <PostActionButtonsBlock>\n      <ActionButton onClick={onEdit}>수정</ActionButton>\n      <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\n      <AskRemoveModal\n        visible={modal}\n        onConfirm={onConfirm}\n        onCancel={onCancel}\n      />\n    </PostActionButtonsBlock>\n  );\n};\n\nexport default PostActionButtons;\n","import React, {ReactNode} from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport styled from 'styled-components';\nimport { ReadPostInfo } from '../../lib/api/posts';\nimport palette from '../../lib/styles/palette';\nimport Responsive from '../common/Responsive';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\n\nconst PostViewerBlock = styled(Responsive)`\n  margin-top: 4rem;\n`;\nconst PostHead = styled.div`\n  border-bottom: 1px solid ${palette.gray[2]};\n  padding-bottom: 3rem;\n  margin-bottom: 3rem;\n  h1 {\n    font-size: 3rem;\n    line-height: 1.5;\n    margin: 0;\n  }\n`;\n\nconst PostContent = styled.div`\n  font-size: 1.3125rem;\n  color: ${palette.gray[8]};\n`;\n\ntype PostViewerProps = {\n  post: ReadPostInfo | null,\n  loading: boolean,\n  error: Error | null,\n  actionButtons: ReactNode\n}\n\nconst PostViewer = ({post, error, loading, actionButtons}: PostViewerProps) => {\n  \n  // 에러 발생 시\n  if(error){\n    if(error.message.includes('404')){\n      return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>\n    }\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>\n  }\n\n  // 로딩 중이거나 아직 포스트 데이터가 없을 때\n  if(loading || !post){\n    return null;\n  }\n\n  const {title, body, user, publishedDate, tags} = post;\n\n  return (\n    <PostViewerBlock>\n      <Helmet>\n        <title>{title} - SSUKIMLOG</title>\n      </Helmet>\n      <PostHead>\n        <h1>{title}</h1>\n        <SubInfo username={user.username} publishedDate={publishedDate} hasMarginTop/>\n        <Tags tags={tags}/>\n      </PostHead>\n      {actionButtons}\n      <PostContent\n        dangerouslySetInnerHTML={{ __html: body }}\n      />\n    </PostViewerBlock>\n  );\n};\n\nexport default PostViewer;\n","import { call, put, takeEvery } from '@redux-saga/core/effects';\nimport { AxiosError } from 'axios';\nimport {\n  ActionType,\n  createAction,\n  createAsyncAction,\n  createReducer,\n} from 'typesafe-actions';\nimport { readPost, ReadPostInfo } from '../../lib/api/posts';\nimport { finishLoading, startLoading } from '../loading/loading';\n\nconst READ_POST = 'post/READ_POST';\nconst READ_POST_SUCCESS = 'post/READ_POST_SUCCESS';\nconst READ_POST_FAILURE = 'post/READ_POST_FAILURE';\nconst UNLOAD_POST = 'post/UNLOAD_POST'; // 포스트 페이지에서 벗어날 때 데이터 비우기\n\nexport const readPostAsync = createAsyncAction(\n  READ_POST,\n  READ_POST_SUCCESS,\n  READ_POST_FAILURE,\n)<string, ReadPostInfo, AxiosError>();\nexport const unloadPost = createAction(UNLOAD_POST)();\n\nconst actions = { readPostAsync, unloadPost };\ntype ReadAction = ActionType<typeof actions>;\n\nfunction* readPostSaga(action: ReturnType<typeof readPostAsync.request>) {\n  yield put(startLoading(READ_POST)); // 로딩 시작\n  try {\n    const response: ReadPostInfo = yield call(readPost, action.payload);\n    // console.log('response: ' + JSON.stringify(response));\n    yield put(readPostAsync.success(response));\n  } catch (e) {\n    yield put(readPostAsync.failure(e));\n  }\n  yield put(finishLoading(READ_POST)); // 로딩 끝\n}\nexport function* postSaga() {\n  yield takeEvery(READ_POST, readPostSaga);\n}\n\ntype ReadState = {\n  post: ReadPostInfo | null;\n  readError: Error | null;\n  loading: boolean;\n};\n\nconst initialState: ReadState = {\n  post: null,\n  readError: null,\n  loading: false,\n};\n\nconst post = createReducer<ReadState, ReadAction>(initialState, {\n  [READ_POST]: (state) => ({\n    ...state,\n    loading: true,\n  }),\n  [READ_POST_SUCCESS]: (state, { payload: post }) => ({\n    ...state,\n    post,\n    loading: false,\n  }),\n  [READ_POST_FAILURE]: (state, { payload: error }) => ({\n    ...state,\n    error,\n    loading: false,\n  }),\n  [UNLOAD_POST]: () => initialState,\n});\n\nexport default post;\n","import React, { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport PostViewer from '../../components/post/PostViewer';\nimport { removePost } from '../../lib/api/posts';\nimport { RootState } from '../../modules';\nimport { readPostAsync, unloadPost } from '../../modules/post';\nimport { setOriginalPost } from '../../modules/write';\n\nconst PostViewerContainer: FunctionComponent<RouteComponentProps> = ({\n  match,\n  history,\n}: any) => {\n  // 처음 마운트될 때 포스트 읽기 api 요청\n  const { postId } = match.params;\n  const dispatch = useDispatch();\n  const { post, error, loading, user } = useSelector((state: RootState) => ({\n    post: state.post.post,\n    error: state.post.readError,\n    loading: state.post.loading,\n    user: state.user.user,\n  }));\n\n  useEffect(() => {\n    dispatch(readPostAsync.request(postId));\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalPost(post));\n    history.push('/write');\n  };\n\n  const onRemove = async () => {\n    try {\n      await removePost(postId);\n      history.push('/'); // 홈으로 이동\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const ownPost = (user && user._id) === (post && post.user._id);\n\n  return (\n    <PostViewer\n      post={post}\n      loading={loading}\n      error={error}\n      actionButtons={ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove}/>}\n    />\n  );\n};\n\nexport default withRouter(PostViewerContainer);\n","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\r\n\r\nconst PostPage = () => {\r\n    return (\r\n        <>\r\n            <HeaderContainer />\r\n            <PostViewerContainer />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default PostPage;","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport PostListPage from './pages/PostListPage';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport WritePage from './pages/WritePage';\nimport PostPage from './pages/PostPage';\nimport { Helmet } from 'react-helmet-async';\n\nconst App = () => {\n  return (\n    <>\n    <Helmet>\n      <title>SSUKIMLOG</title>\n    </Helmet>\n      <Route component={PostListPage} path={['/@:username', '/']} exact />\n      <Route component={LoginPage} path=\"/login\" />\n      <Route component={RegisterPage} path=\"/register\" />\n      <Route component={WritePage} path=\"/write\" />\n      <Route component={PostPage} path=\"/@:username/:postId\" />\n    </>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport auth, { authSaga } from './auth/';\r\nimport loading from './loading/loading';\r\nimport user, { userSaga } from './user/';\r\nimport write, { writeSaga } from './write';\r\nimport post, { postSaga } from './post';\r\nimport posts, { postsSaga } from './posts';\r\n\r\nconst rootReducer = combineReducers({\r\n  auth,\r\n  loading,\r\n  user,\r\n  write,\r\n  post,\r\n  posts\r\n});\r\n\r\nexport default rootReducer;\r\n\r\n// 루트 리듀서의 반환값를 유추해줍니다\r\n// 추후 이 타입을 컨테이너 컴포넌트에서 불러와서 사용해야 하므로 내보내줍니다.\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\n// 루트 사가를 만들어서 내보내주세요.\r\nexport function* rootSaga() {\r\n  // console.log('rootSaga Call');\r\n  yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './modules';\nimport { tempSetUser, checkAsync } from './modules/user';\nimport { HelmetProvider } from 'react-helmet-async';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nfunction loadUser() {\n  // console.log('loadUser Start');\n  try {\n    const user: string | null = localStorage.getItem('user');\n    if (!user) return; // 로그인 상태가 아니라면 아무것도 안함\n    // console.log(user);\n    store.dispatch(tempSetUser(user));\n    store.dispatch(checkAsync.request(''));\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n  // console.log('loadUser End');\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}